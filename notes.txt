start with partial solution being square somewhat filled in.
create list of candidates by filling in each square with one of each valid input
    example: if            a square is 1 3 . 4 and valid inputs are 1..4 inclusive, then the list of candidates would be
                                       2 4 3 1
                                       3 1 4 2
                                       . 2 1 3
    x: 2, y: 0, v: 1
    x: 2, y: 0, v: 2
    x: 2, y: 0, v: 3
    x: 2, y: 0, v: 4

    x: 0, y: 3, v: 1
    x: 0, y: 3, v: 2
    x: 0, y: 3, v: 3
    x: 0, y: 3, v: 4

    repeat this for all empty locations
remove invalid candidates. we've added all candidates to our set but some of these will be invalid.
    example: our partial solution includes 1, 3, and 4 in row 1, these would all be marked "immutable".
    since a latin square may only have 1 of a given value (treatment in our case) in a row and column,
    we can remove all candidates in row 0 with a value of 1, 3, or 4, and all candidates in col 0 with
    value of 1, 2, or 3.
    this leaves our example candidate list as:
    x: 2, y: 0, v: 2
    x: 0, y: 3, v: 4



yadayada
add randomly selected candidate to solution
update the candidate set to remove all candidates in the same position as the candidate we just added to solution
recalculate all the costs for candidates now that we have changed the solution




what is a candidate?
    a object with a treatment type
    a x coordinate
    a y coordinate


